#Welcome to buildout.  Record any Plone/Zope instances under the 'instances'
#value below and they will automatically get included in the buildout parts
#process.
[buildout]
instances =
    instance1
parts =
    ${extra-parts:parts}
    lxml
    ${:instances}
    instance1-test
    zopepy
    zope-initd-script
    supervisor
    supervisor-initd-script
    checkinterval
    zhw
    test
    ipython
    omelette
    ipython-profile

extends =
    http://dist.plone.org/release/4.3.7/versions.cfg

versions = versions
prefer-final = false
eggs =
    lxml
    Pillow
    Plone
develop =
unzip = true

extensions =
    mr.developer
var-directory = ${buildout:directory}/var
log-directory = ${buildout:var-directory}/log
effective-user = buildout

# Picked versions
show-picked-versions = true
update-versions-file = versions.cfg

#mr.developer options
sources-dir = src
sources = sources
auto-checkout = *
always-accept-server-certificate = true

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
force = false

#####End base buildout configuration############################

#Sources: for mr.developer.  We get these from source every time we run
#buildout.
[sources]

#Extra parts: an extra section to run certain 'parts' before everything
#else is run.  Once such example might be eggs that need special attention
#before the Zope2 instance is brought into being.
[extra-parts]
parts = 

################################################################
# Versions: specialist pinned versions of some packages
################################################################
[versions]
plone.app.users = 2.0.4
# Plone Hotfix 20151006
plone.protect = 3.0.15
plone.keyring = 3.0.1
plone.locking = 2.0.8


################################################################
# Service Settings: our default settings and addresses/ports for services
################################################################
[settings]
plone-instance1 = 0.0.0.0:8080
plone-instance1-webdav-port =
plone-instance1-test = 0.0.0.0:8888
use-zeo = True
zeo = 127.0.0.1:8210
zeo-client-blob-cache-size = 2GB

################################################################
# Plone/Zope installation sections
################################################################

#Plone instance: our instance of Zope that will run our Plone site.
#We're pre-configured here with a number of different pieces of
#functionality from sections above.  These can be customised in buildout.cfg.
[instance1]
recipe = plone.recipe.zope2instance
#debug-mode = off
#verbose-security = off
#deprecation-warnings = off
zeo-client = ${settings:use-zeo}
zeo-address = ${settings:zeo}
zeo-client-blob-cache-size = ${settings:zeo-client-blob-cache-size}
#shared-blob = off
user = admin:admin
http-address = ${settings:plone-instance1}
webdav-address = ${settings:plone-instance1-webdav-port}
environment-vars =
    PTS_LANGUAGES en es
    zope_i18n_allowed_languages en es
    zope_i18n_compile_mo_files true
zope-conf-additional =
resources = ${buildout:directory}/resources
eggs =
    ${buildout:eggs}
    plone4.csrffixes==1.0.8
    Products.PloneHotfix20151208
    plone.app.dexterity [grok, relations]
    plone.resource
    plone.formwidget.captcha
    plone.formwidget.recaptcha
    ${ipython-eggs:eggs}
    ${zhw:eggs}
zcml =
products =
    ${buildout:directory}/products
z2-log = off
event-log-custom =
    <logfile>
        path ${buildout:log-directory}/${:_buildout_section_name_}.log
        #max-size 5mb
        when D
        old-files 366
    </logfile>
access-log-custom =
    <logfile>
        path ${buildout:log-directory}/${:_buildout_section_name_}-Z2.log
        #max-size 5mb
        when D
        old-files 366
    </logfile>

#Plone testing instance: used to sanity-check configuration before restarting
#production or other Plone instances. We can start this instance of Zope
#to ensure the current configuration will work before shutting down a
#functional instance.
[instance1-test]
<= instance1
http-address = ${settings:plone-instance1-test}
webdav-address = 

#Backup configuration: allows for basic backup of local database files and blobs.
[backup]
parts = 
    backup-repozo
    backup-plone
    backup-cronjob

[backup-repozo]
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo

[backup-plone]
recipe = collective.recipe.backup
keep = 4

[backup-cronjob]
recipe = z3c.recipe.usercrontab
times = 0 0 * * *
command = ${buildout:directory}/bin/backup-plone; echo "Backup completed at `date`" >> ${buildout:log-directory}/${:_buildout_section_name_}.log

[backup-zeopack-cronjob]
recipe = z3c.recipe.usercrontab
times = 0 0 * * SUN
command = ${buildout:directory}/bin/zeopack

[backup-zodbpack-cronjob]
recipe = z3c.recipe.usercrontab
times = 0 0 * * SUN
host = localhost:8080
command = curl -X POST -d 'days:float=0' http://${instance1:user}@${:host}/Control_Panel/Database/main/manage_pack; echo "Backup completed at `date`" >> ${buildout:log-directory}/${:_buildout_section_name_}.log

#Zeo: the database service that works with Zope.
[zeo]
recipe = plone.recipe.zeoserver
zeo-address = ${settings:zeo}
zeo-log-custom =
    <logfile>
        path ${buildout:log-directory}/${:_buildout_section_name_}.log
        max-size 5mb
        old-files 10
    </logfile>

#Zopepy: create a Python interpreter with all eggs and packages
#that Zope would have during startup (useful for testing).
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance1:eggs}
interpreter = zopepy
scripts = zopepy

# IPython-Zope: An IPython Shell for interactive use with zope running.
# Either run "bin/ipython-zope" for an interactive console, or
# insert "import ipdb; ipdb.set_trace();" into your code to start debugging.
[ipython-eggs]
eggs =
    ipython
    ipdb

[ipython]
recipe = zc.recipe.egg
eggs =
    ${ipython-eggs:eggs}
    ${instance1:eggs}
initialization =
    import sys, os
    os.environ["INSTANCE_HOME"] = "${instance1:location}"
    sys.argv[1:1] = "--profile=zope2".split()
scripts = ipython=ipython-zope
#extra-paths = ${zope2:location}/lib/python

[ipython-profile]
recipe = plone.recipe.command
command = 
    mkdir -p ~/.ipython/profile_zope2/startup;
    cp -v -f ${buildout:directory}/templates/ipy_profile_zope.py ~/.ipython/profile_zope2/startup/;
update-command = ${:command}

#CheckInterval: generate script to find the optimal Python check interval.
#Setting this optimally may have a significant affect on performance.
[checkinterval]
recipe = zc.recipe.egg
eggs = jarn.checkinterval

#ZopeHealthWatcher: ZopeHealthWatcher allows you to monitor the threads of a 
#Zope application. In our situation, this will help debug locked threads
#for Plone.
[zhw]
recipe = zc.recipe.egg
eggs = ZopeHealthWatcher
scripts = zope_health_watcher

#Omlette: create a unified, symlinked directory structure of all available
#Python eggs in the installation.  Very useful to save traversing into eggs.
[omelette]
recipe = collective.recipe.omelette
eggs = ${ipython:eggs}
products = ${instance1:products}
packages = ./

#Supervisor: Process manager for all parts.
[supervisor]
recipe = collective.recipe.supervisor
programs = 
    10 instance1 ${buildout:bin-directory}/instance1 [console] ${instance1:location} true


#Init.d Scripting: we generate our script for use within init.d for 
#starting and stopping our Zope/Plone instance.  Generate the script off
#our template, and then make it executable.  
#Note: We explicitly specify the startbrace and endbrace variables, 
#because bash uses exactly the same syntax as the templater, thus 
#causing legit bash variables to try to be templated!
#-----------------------------------------------------------------------
#Usage: if you want to install this script, go ahead and copy it into 
#/etc/init.d/ as root thus: `cp etc/init.d/zope /etc/init.d/zope`.
[zope-initd-script]
recipe = collective.recipe.template
input = templates/zope.init.in
output = ${buildout:directory}/etc/init.d/zope
mode = 755
instances = ${buildout:instances}
startbrace = ${
endbrace = }

[supervisor-initd-script]
recipe = collective.recipe.template
input = templates/supervisor.initd
output = ${buildout:directory}/etc/init.d/supervisord
mode = 755

#Test runner: allow us to execute unit tests against our code
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs = 
    ${instance1:eggs}
include-site-packages = false
